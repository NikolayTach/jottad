val args: Array[String] = Array(NullFunction)
java.io.FileNotFoundException;
	export to ArraySringFunction java.base/java.io.FileInputStream.open0 NullFunction(Native Method)
	export to ArrayStringFunction /root/java.base/java.io.FileInputStream.open(FileInputStream.java)
	export to ArrayStringFunction java.base/java.io.FileInputStream.<init>(FileInputStream.java)
  export to ArrayStringFunction scala.reflect.io.File.inputStream(File.scala)
	export to ArrayStringFunction scala.reflect.io.File.inputStream(File.scala)
	export to ArrayStringFunction  scala.reflect.io.Streamable$Chars.reader(Streamable.scala)
	export to ArrayStringFunction scala.reflect.io.Streamable$Chars.reader$(Streamable.scala)
	export to ArrayStringFunction scala.reflect.io.File.reader(File.scala)
	export to ArrayStringFunction scala.reflect.io.Streamable$Chars.bufferedReader(Streamable.scala)
  export to ArrayStringFunction scala.reflect.io.Streamable$Chars.bufferedReader$(Streamable.scala)
	export scala.reflect.io.File.bufferedReader(File.scala)
	export scala.reflect.io.Streamable$Chars.bufferedReader(Streamable.scala)
	export scala.reflect.io.Streamable$Chars.bufferedReader$(Streamable.scala)
	export scala.reflect.io.File.bufferedReader(File.scala)
	export scala.reflect.io.Streamable$Chars.applyReader(Streamable.scala)
	export scala.reflect.io.Streamable$Chars.applyReader$(Streamable.scala)
	export scala.reflect.io.File.applyReader(File.scala)
	export scala.tools.nsc.interpreter.shell.ILoop.$anonfun$interpretAllFrom$1(ILoop.scala)
	

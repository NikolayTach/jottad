val args: Array[String] = Array()
java.io.FileNotFoundException: /root 
	export to ArraySringFunction java.base/java.io.FileInputStream.open0 NullFunction(Native Method)
	export to ArrayStringFunction /root/java.base/java.io.FileInputStream.open(FileInputStream.java)
	export to ArrayStringFunction java.base/java.io.FileInputStream.<init>(FileInputStream.java)
  export to ArrayStringFunction scala.reflect.io.File.inputStream(File.scala)
	export to ArrayStringFunction scala.reflect.io.File.inputStream(File.scala)
	export to ArrayStringFunction  scala.reflect.io.Streamable$Chars.reader(Streamable.scala)
	export to ArrayStringFunction scala.reflect.io.Streamable$Chars.reader$(Streamable.scala)
	export to ArrayStringFunction scala.reflect.io.File.reader(File.scala)
	export to ArrayStringFunction scala.reflect.io.Streamable$Chars.bufferedReader(Streamable.scala)
  export to ArrayStringFunction scala.reflect.io.Streamable$Chars.bufferedReader$(Streamable.scala)
	export scala.reflect.io.File.bufferedReader(File.scala)
	export scala.reflect.io.Streamable$Chars.bufferedReader(Streamable.scala)
	export scala.reflect.io.Streamable$Chars.bufferedReader$(Streamable.scala)
	export scala.reflect.io.File.bufferedReader(File.scala)
	export scala.reflect.io.Streamable$Chars.applyReader(Streamable.scala)
	export scala.reflect.io.Streamable$Chars.applyReader$(Streamable.scala)
	export scala.reflect.io.File.applyReader(File.scala)
	export scala.tools.nsc.interpreter.shell.ILoop.$anonfun$interpretAllFrom$1(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.savingReplayStack(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.interpretAllFrom(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.$anonfun$loadCommand$1(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.$anonfun$withFile$1(ILoop.scala)
	at scala.tools.nsc.interpreter.IMain.withLabel(IMain.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.withFile(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.run$3(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.loadCommand(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.$anonfun$standardCommands$7(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.LoopCommands$LineCmd.apply(LoopCommands.scala)
	at scala.tools.nsc.interpreter.shell.LoopCommands.colonCommand(LoopCommands.scala)
	at scala.tools.nsc.interpreter.shell.LoopCommands.colonCommand$(LoopCommands.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.colonCommand(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.command(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.processLine(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.loop(ILoop.scala)
	at scala.tools.nsc.interpreter.shell.ILoop.run(ILoop.scala)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
